CREATE TABLE UF_LOG AS SELECT * FROM UF WHERE 1=2;

ALTER TABLE UF_LOG ADD USUARIO VARCHAR(255);


CREATE OR REPLACE TRIGGER BU_UF
BEFORE UPDATE ON UF 
FOR EACH ROW
BEGIN 
	IF :NEW.DS_UF_NOME = 'TESTE' := :OLD.DS_UF_NOME;
	END IF;
END;




-- ADICIONE NA TABELA UF_LOG UMA COLUNA CHAMADA USUARIO.

-- PARA CADA LINHA ALTERADA NA TABELA O NOME DO USUARIO QUE REALIZOU A ALTERAÇÃO DEVE SER GRAVADO NA UF_LOG, JUNTAMENTE COM OS VALORES ANTIGOS. 

CREATE OR REPLACE TRIGGER AU_UF 
BEFORE UPDATE ON UF 
FOR EACH ROW 
BEGIN 
	INSERT INTO UF_LOG( COD, NOME, STATUS, USUARIO) 
	VALUES(:OLD.COD, :OLD.NOME, :OLD.STATUS, USER);
END;
/


UPDATE UF
SET STATUS = 0
WHERE COD = 'AC' AND NOME = 'Acre';

SELECT * FROM UF;
SELECT * FROM UF_LOG;

SET SERVEROUT ON;


RAISE_APPLICATION_ERROR(-20001, "MENSAGEM");



-- CRIE UMA TRIGGER NA TABELA UF QUE CASO SEJA INSERIDO UM DS_UF_NOME QUE JA EXISTA
-- NÃO PERMITA A INSERÇÃO E ENVIE UMA MENSAGEM DE ERRO. 

 CREATE OR REPLACE TRIGGER VF_UF
 BEFORE INSERT OR UPDATE ON UF 
 FOR EACH ROW
 DECLARE 
 	UFS NUMBER(1) := 0;
 BEGIN 
 	SELECT 1 INTO UFS FROM UF WHERE NOME = :NEW.NOME;

 	IF UFS = 1
 	THEN 
 	RAISE_APPLICATION_ERROR(-20001, 'Já existe UF com este nome!');
 	END IF;

 	EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
 END;
 /

 -- TRIGGER SIMPLIFICADA
 CREATE OR REPLACE TRIGGER VF_UF
 BEFORE INSERT OR UPDATE ON UF 
 FOR EACH ROW
 DECLARE 
 	UFS NUMBER(1) := 0;
 BEGIN 
 	SELECT 1 INTO UFS FROM UF WHERE UPPER(NOME) = UPPER(:NEW.NOME);

 	RAISE_APPLICATION_ERROR(-20001, 'Já existe UF com este nome!');

 	EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
 END;
 /




-- CRIE UMA TRIGGER QUE NAO PERMITA QUE O ESTADO COM A SIGLA 'XX' SEJA APAGADA
CREATE OR REPLACE TRIGGER DEL_UF
 BEFORE DELETE ON UF 
 FOR EACH ROW
 BEGIN 
IF :OLD.COD = 'XX' THEN 
 	RAISE_APPLICATION_ERROR(-20001, 'O estado com a sigla XX não será apagado');
END IF;
  END;
 /

DELETE FROM UF WHERE COD = 'XX';
DELETE FROM UF WHERE COD = 'CD';




