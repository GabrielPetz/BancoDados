CREATE OR REPLACE PACKAGE UTIL AS

FUNCTION VALIDACPF(NRCPF NUMBER) RETURN NUMBER;
FUNCTION VALIDACNPJ(NRCNPJ NUMBER) RETURN NUMBER;
PROCEDURE SETREPRESENTANTE( NOME IN REPRESENTANTE.NOME_REPRESENTANTE%TYPE, CPF IN REPRESENTANTE.CPF_REPRESENTANTE%TYPE, ID_REP OUT REPRESENTANTE.IDREPRESENTANTE%TYPE);
 PROCEDURE SETCLIENTE( NOME IN CLIENTE.NOME_CLIENTE%TYPE, CNPJ IN CLIENTE.CNPJ_CLIENTE%TYPE, RAMO IN CLIENTE.RAMO_ATIVIDADE%TYPE, CIDADE IN CLIENTE.CIDADE%TYPE, 
	ESTADO IN CLIENTE.ESTADO%TYPE, 
	ENDERECO IN CLIENTE.ENDERECO%TYPE, 
	ID_CLI OUT CLIENTE.IDCLIENTE%TYPE);
 PROCEDURE SETPRODUTO( NOME IN PRODUTO.DSPRODUTO%TYPE, MARCA IN PRODUTO.DSMARCA%TYPE, ID_PROD OUT PRODUTO.IDPRODUTO%TYPE);
 PROCEDURE GET_TOTAL_NOTA(NR_NOTA_IN IN NOTA_FISCAL.NR_NOTA_FISCAL%TYPE);


END UTIL;




CREATE OR REPLACE PACKAGE BODY UTIL AS 

PROCEDURE GET_TOTAL_NOTA(NR_NOTA_IN IN NOTA_FISCAL.NR_NOTA_FISCAL%TYPE) IS
NR_NOTA_FISCAL NOTA_FISCAL.NR_NOTA_FISCAL%TYPE;
NOME_CLIENTE CLIENTE.NOME_CLIENTE%TYPE; 
DATA_EMISSAO NOTA_FISCAL.DATA_EMISSAO%TYPE;
TOTAL RELATORIO.VALOR_NOTA%TYPE;
BEGIN
SELECT NT.NR_NOTA_FISCAL, CLI.NOME_CLIENTE, NT.DATA_EMISSAO, 
(PR.QTD_VENDIDA * PR.VL_UNITARIO) * ( 1 - (PR.PERC_DESCONTO / 100) ) AS TOTAL 
INTO NR_NOTA_FISCAL, NOME_CLIENTE, DATA_EMISSAO, TOTAL
FROM CLIENTE CLI, NOTA_FISCAL NT, PRODUTOS_NOTA PR
WHERE CLI.IDCLIENTE = NT.IDCLIENTE 
AND NT.NR_NOTA_FISCAL = PR.NR_NOTA_FISCAL
AND NT.NR_NOTA_FISCAL = NR_NOTA_IN;
INSERT INTO RELATORIO(NUMERO_NOTA, NOME_CLIENTE, DATA_NOTA, VALOR_NOTA) 
VALUES(NR_NOTA_FISCAL, NOME_CLIENTE, DATA_EMISSAO, TOTAL);
END;

PROCEDURE SETREPRESENTANTE( NOME IN REPRESENTANTE.NOME_REPRESENTANTE%TYPE, CPF IN REPRESENTANTE.CPF_REPRESENTANTE%TYPE, ID_REP OUT REPRESENTANTE.IDREPRESENTANTE%TYPE ) IS
	TESTE NUMBER;
BEGIN 
	SELECT MAX(IDREPRESENTANTE + 1) INTO ID_REP FROM REPRESENTANTE; 
	IF ID_REP IS NULL 
		THEN ID_REP := 0; 
		END IF;
	SELECT COUNT(*) INTO TESTE FROM REPRESENTANTE WHERE NOME_REPRESENTANTE LIKE NOME OR CPF_REPRESENTANTE = CPF;

	IF TESTE > 0 
		THEN RAISE_APPLICATION_ERROR(-20001, 'NOME OU CPF REPETIDO');
	ELSE
		INSERT INTO REPRESENTANTE(IDREPRESENTANTE, NOME_REPRESENTANTE, CPF_REPRESENTANTE) VALUES(ID_REP, NOME, CPF);
	END IF;
END;


PROCEDURE SETCLIENTE( NOME IN CLIENTE.NOME_CLIENTE%TYPE, 
	CNPJ IN CLIENTE.CNPJ_CLIENTE%TYPE, 
	RAMO IN CLIENTE.RAMO_ATIVIDADE%TYPE, 
	CIDADE IN CLIENTE.CIDADE%TYPE, 
	ESTADO IN CLIENTE.ESTADO%TYPE, 
	ENDERECO IN CLIENTE.ENDERECO%TYPE, 
	ID_CLI OUT CLIENTE.IDCLIENTE%TYPE) IS
TESTE NUMBER;
BEGIN 
SELECT MAX(IDCLIENTE + 1) INTO ID_CLI FROM CLIENTE; 
IF ID_CLI IS NULL 
THEN ID_CLI := 0; 
END IF;
SELECT COUNT(*) INTO TESTE FROM CLIENTE WHERE NOME_CLIENTE LIKE NOME OR CNPJ_CLIENTE = CNPJ;
IF TESTE > 0 
THEN RAISE_APPLICATION_ERROR(-20001, 'NOME OU CNPJ REPETIDO');
ELSE
INSERT INTO CLIENTE(IDCLIENTE, NOME_CLIENTE, CNPJ_CLIENTE, RAMO_ATIVIDADE, CIDADE, ESTADO, ENDERECO) VALUES(ID_CLI, NOME, CNPJ, RAMO, CIDADE, ESTADO, ENDERECO);
END IF;
END;


PROCEDURE SETPRODUTO( NOME IN PRODUTO.DSPRODUTO%TYPE, MARCA IN PRODUTO.DSMARCA%TYPE, ID_PROD OUT PRODUTO.IDPRODUTO%TYPE) IS 
TESTE NUMBER;
BEGIN 
SELECT MAX(IDPRODUTO + 1) INTO ID_PROD FROM PRODUTO; 
IF ID_PROD IS NULL 
THEN ID_PROD := 0; 
END IF;
SELECT COUNT(*) INTO TESTE FROM PRODUTO WHERE DSPRODUTO LIKE NOME;
IF TESTE > 0 
THEN RAISE_APPLICATION_ERROR(-20001, 'NOME DO PRODUTO REPETIDO');
ELSE
INSERT INTO PRODUTO(IDPRODUTO, DSPRODUTO, DSMARCA) VALUES(ID_PROD, NOME, MARCA);
END IF;
END;


FUNCTION VALIDACPF(NRCPF NUMBER) RETURN NUMBER IS
BEGIN
DECLARE 
	TYPE ARRAYCPF IS VARRAY(11) OF NUMBER(1);
	CPF ARRAYCPF := ARRAYCPF();
	CPFSTRING VARCHAR2(11);
	SOMA NUMBER(30);
	DIGITO1 NUMBER(5) := 0;
	DIGITO2 NUMBER(5) := 0;
BEGIN
		CPFSTRING := LPAD( TO_CHAR( NRCPF ), 11, '0'); 
		dbms_output.put_line('CPF recebido: ');
		dbms_output.put_line(CPFSTRING);
		dbms_output.put_line('-----------------------------------------------');
		FOR I IN 1..LENGTH(CPFSTRING) LOOP
			CPF.EXTEND();
			CPF(I) := SUBSTR(CPFSTRING, I, 1);
			dbms_output.put_line(CPF(I));
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');
		FOR I IN 1..9 LOOP
			DIGITO1 := DIGITO1 + ( CPF(I) * ( 11 - I ) );
			dbms_output.put_line(DIGITO1);
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');
		DIGITO1 := DIGITO1 * 10;
		DIGITO1 := MOD(DIGITO1, 11);
		IF DIGITO1 = 10 THEN 
		DIGITO1 := 0;
		END IF; 
		IF DIGITO1 != CPF(10)
		THEN RETURN 0;
		END IF; 
		dbms_output.put_line('Digito verificador 1 : ');
		dbms_output.put_line(DIGITO1);
		dbms_output.put_line('-----------------------------------------------');
		FOR I IN 1..10 LOOP
			DIGITO2 := DIGITO2 + ( CPF(I) * ( 12 - I ) );
			dbms_output.put_line(DIGITO2);
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');
				DIGITO2 := DIGITO2 * 10;
				DIGITO2 := MOD(DIGITO2, 11);
				IF DIGITO2 = 10 THEN 
				DIGITO2 := 0;
				END IF; 
				IF DIGITO2 != CPF(11)
				THEN RETURN 0;
				END IF; 
			dbms_output.put_line('Digito verificador 2 : ');
			dbms_output.put_line(DIGITO2);
			dbms_output.put_line('-----------------------------------------------');
		RETURN 1;
END;
END;








FUNCTION VALIDACNPJ(NRCNPJ NUMBER) RETURN NUMBER IS
BEGIN
DECLARE 
	TYPE ARRAYCNPJ IS VARRAY(14) OF NUMBER(1);
	CNPJ ARRAYCNPJ := ARRAYCNPJ();
	MASK ARRAYCNPJ := ARRAYCNPJ();
	CNPJSTRING VARCHAR2(14);
	SOMA NUMBER(30);
	DIGITO1 NUMBER(10) := 0;
	DIGITO2 NUMBER(10) := 0;
BEGIN
		CNPJSTRING := LPAD( TO_CHAR( NRCNPJ ), 14, '0'); 
		dbms_output.put_line('CNPJ recebido: ');
		dbms_output.put_line(CNPJSTRING);
		dbms_output.put_line('-----------------------------------------------');
		MASK.EXTEND(14);
		MASK(1) := 6;
		MASK(2) := 5;
		MASK(3) := 4;
		MASK(4) := 3;
		MASK(5) := 2;
		MASK(6) := 9;
		MASK(7) := 8;
		MASK(8) := 7;
		MASK(9) := 6;
		MASK(10) := 5;
		MASK(11) := 4;
		MASK(12) := 3;
		MASK(13) := 2;
		FOR I IN 1..LENGTH(CNPJSTRING) LOOP
			CNPJ.EXTEND();
			CNPJ(I) := SUBSTR(CNPJSTRING, I, 1);
			dbms_output.put_line(CNPJ(I));
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');		
		FOR I IN 1..12 LOOP
			DIGITO1 := DIGITO1 + ( CNPJ(I) * MASK(I + 1) );
			dbms_output.put_line(DIGITO1);
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');
		DIGITO1 := MOD(DIGITO1, 11);
		IF DIGITO1 < 2 THEN 
		DIGITO1 := 0;
		ELSE 
		DIGITO1 := 11 - DIGITO1;
		END IF; 
		IF DIGITO1 != CNPJ(13)
		THEN RETURN 0;
		END IF; 		
		dbms_output.put_line('Digito verificador 1 : ');
		dbms_output.put_line(DIGITO1);
		dbms_output.put_line('-----------------------------------------------');
		FOR I IN 1..13 LOOP
			DIGITO2 := DIGITO2 + ( CNPJ(I) * MASK(I) );
			dbms_output.put_line(DIGITO2);
		END LOOP;
			dbms_output.put_line('-----------------------------------------------');

				DIGITO2 := MOD(DIGITO2, 11);

				IF DIGITO2 < 2 THEN 
				DIGITO2 := 0;
				ELSE 
				DIGITO2 := 11 - DIGITO2;
				END IF; 

				IF DIGITO2 != CNPJ(14)
				THEN RETURN 0;
				END IF; 
			dbms_output.put_line('Digito verificador 2 : ');
			dbms_output.put_line(DIGITO2);
			dbms_output.put_line('-----------------------------------------------');
		RETURN 1;
END;
END;

END UTIL;
/