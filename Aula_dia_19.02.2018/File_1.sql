
DROP FUNCTION TESTE;
DROP FUNCTION verificador;

CREATE OR REPLACE FUNCTION VERIFICADOR ( PARAMETRO1 VARCHAR ) RETURN VARCHAR IS --Não usar OR REPLACE em alguns casos
BEGIN
RETURN 'VOCE DIGITOU ' || PARAMETRO1;
END; 
/


CREATE FUNCTION SOMAR ( PARAMETRO1 NUMBER, PARAMETRO2 NUMBER ) RETURN NUMBER IS --Não usar OR REPLACE em alguns casos
BEGIN
RETURN PARAMETRO1 + PARAMETRO2;
END; 
/




SHOW ERRORS -- Mostra erros



SELECT verificador('testando funcao') FROM DUAL --Usar DUAL como parametro para o from em casos de teste da função;
SELECT SOMAR(1, 5)FROM DUAL;



IF condicao THEN 
codigo;
ELSE  
codigo;
END IF;



CREATE OR REPLACE FUNCTION MAIOR(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER IS 
BEGIN 
IF NUM1 > NUM2 THEN
RETURN NUM1;
ELSE IF NUM1 < NUM2 THEN 
RETURN NUM2;
ELSE 
RETURN null; 
END IF;
END IF;
END;
/


CREATE OR REPLACE FUNCTION MAIOR(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER IS 
DECLARE 
VAR NUMBER(2);
BEGIN 
IF NUM1 > NUM2 THEN
RETURN NUM1;
ELSIF NUM1 < NUM2 THEN 
RETURN NUM2;
ELSE 
RETURN null; 
END IF;
END;
/




CREATE OR REPLACE FUNCTION MAIOR(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER IS 

BEGIN
CASE WHEN NUM1 > NUM2 THEN
RETURN NUM1; 
WHEN NUM2 > NUM1 THEN
RETURN NUM2;
ELSE
RETURN NULL;
END CASE;
END;
/


SELECT SYSDATE FROM DUAL;


CREATE OR REPLACE FUNCTION DATAHOJE RETURN VARCHAR IS 
HOJE VARCHAR(50);
BEGIN 

SELECT SYSDATE 
INTO HOJE 
FROM DUAL;

RETURN HOJE;
END;
/


CREATE OR REPLACE FUNCTION REPETIDOR(PARAM1 NUMBER) RETURN NUMBER IS 
X NUMBER;
BEGIN 
X := 0;
FOR I IN 1..10 LOOP 
X := X + I;	
END LOOP;  

RETURN X;

END;





-- Fazer formula de fibonacci 

CREATE FUNCTION FIBONACCI() RETURN NUMBER IS 
DECLARE 
TESTE VARCHAR;
FIBO NUMBER;
BEGIN 
WHILE TESTE = FALSE LOOP
FOR I IN 1..10 LOOP
	FIBO = ( FIBO ) + ( FIBO ); 


END LOOP; 
